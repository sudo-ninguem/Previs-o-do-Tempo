{"ast":null,"code":"var _jsxFileName = \"/home/dio/\\xC1rea de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\"; // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"load .....\",\n      // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n      clima: [] // Neste arrai vamos adicionar as reposta da API sobre clima, dia, etc\n\n    };\n  }\n\n  componentDidMount() {\n    Axios.get(API) // O axios é uma outra forma de buscar links externos (no caso a nossa API) e ele também é uma Promesie\n    .then(response => {\n      const json = response.data; // Estamos acessando a resposta do servidor (O Axios entende por si só o tipo de resposta não porecisa falar que é JSON)\n      // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n\n      this.setState({\n        // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n        city: json.results.city_name,\n\n        /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n        alocado no json.results.city_name\n        \n        Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n        é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n        clima: json.results.forecast\n      });\n    });\n  }\n  /* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \n  dos métodos (.then) */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, \" \", this.state.city, \" \"), this.state.clima.length);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dio/Área de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js"],"names":["React","Axios","API","App","Component","constructor","props","state","city","clima","componentDidMount","get","then","response","json","data","setState","results","city_name","forecast","render","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,gEAAZ,C,CAA6E;;AAE7E,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAOA,KAAP;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,YADK;AACS;AAEpBC,MAAAA,KAAK,EAAE,EAHI,CAGD;;AAHC,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAE;AAEfT,IAAAA,KAAK,CAACU,GAAN,CAAUT,GAAV,EAAe;AAAf,KACGU,IADH,CACSC,QAAQ,IAAG;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAtB,CADgB,CACW;AAE1B;;AAEC,WAAKC,QAAL,CAAe;AAAE;AACfR,QAAAA,IAAI,EAAEM,IAAI,CAACG,OAAL,CAAaC,SADN;;AAEb;;;;;AAMAT,QAAAA,KAAK,EAAEK,IAAI,CAACG,OAAL,CAAaE;AARP,OAAf;AAYH,KAlBH;AAoBH;AACH;;;;AAEEC,EAAAA,MAAM,GAAE;AAEN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKb,KAAL,CAAWC,IAAjB,MADN,EAEO,KAAKD,KAAL,CAAWE,KAAX,CAAiBY,MAFxB,CADF;AAMD;;AA7C+B;;AAgDlC,eAAelB,GAAf","sourcesContent":["import React from 'react';\nimport Axios from 'axios'; \n\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\" // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      city: \"load .....\", // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n     \n      clima: [] // Neste arrai vamos adicionar as reposta da API sobre clima, dia, etc\n    }\n  }\n\n  componentDidMount(){\n\n      Axios.get(API) // O axios é uma outra forma de buscar links externos (no caso a nossa API) e ele também é uma Promesie\n        .then (response=> {\n          const json = response.data // Estamos acessando a resposta do servidor (O Axios entende por si só o tipo de resposta não porecisa falar que é JSON)\n          \n           // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n\n            this.setState ({ // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n              city: json.results.city_name, \n              /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n              alocado no json.results.city_name\n              \n              Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n              é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n\n              clima: json.results.forecast\n            })\n  \n        \n        })\n\n  }\n/* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \ndos métodos (.then) */\n  render(){\n\n    return ( \n      <div>  \n            <h1> {this.state.city} </h1>\n            {this.state.clima.length}\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}