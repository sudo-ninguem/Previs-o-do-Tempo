{"ast":null,"code":"var _jsxFileName = \"/home/dio/\\xC1rea de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js\";\nimport React from 'react';\nimport Axios from 'axios';\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\"; // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"load .....\",\n      // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n      clima: [] // Neste arrai vamos adicionar as reposta da API sobre clima, dia, etc\n\n    };\n  }\n\n  componentDidMount() {\n    Axios.get(API) // O axios é uma outra forma de buscar links externos (no caso a nossa API) e ele também é uma Promesie\n    .then(response => {\n      const json = response.data; // Estamos acessando a resposta do servidor (O Axios entende por si só o tipo de resposta não porecisa falar que é JSON)\n      // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n\n      this.setState({\n        // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n        city: json.results.city_name,\n\n        /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n        alocado no json.results.city_name\n        \n        Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n        é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n        clima: json.results.forecast\n      });\n    });\n  }\n  /* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \n  dos métodos (.then) */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, \" \", this.state.city, \" \"), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"striped centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, \"DATA\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }\n    }, \"MIN.\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, \"MAX.\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }, \"DESC.\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, this.state.clima.map((day, indice) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: indice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }\n      }, day.date), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }\n      }, day.min), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, day.max), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, day.description));\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dio/Área de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js"],"names":["React","Axios","API","App","Component","constructor","props","state","city","clima","componentDidMount","get","then","response","json","data","setState","results","city_name","forecast","render","map","day","indice","date","min","max","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,gEAAZ,C,CAA6E;;AAE7E,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAOA,KAAP;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,YADK;AACS;AAEpBC,MAAAA,KAAK,EAAE,EAHI,CAGD;;AAHC,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAE;AAEfT,IAAAA,KAAK,CAACU,GAAN,CAAUT,GAAV,EAAe;AAAf,KACGU,IADH,CACSC,QAAQ,IAAG;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACE,IAAtB,CADgB,CACW;AAE1B;;AAEC,WAAKC,QAAL,CAAe;AAAE;AACfR,QAAAA,IAAI,EAAEM,IAAI,CAACG,OAAL,CAAaC,SADN;;AAEb;;;;;AAMAT,QAAAA,KAAK,EAAEK,IAAI,CAACG,OAAL,CAAaE;AARP,OAAf;AAaH,KAnBH;AAqBH;AACH;;;;AAEEC,EAAAA,MAAM,GAAE;AAEN,wBACE;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKb,KAAL,CAAWC,IAAjB,MADN,eAGM;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CAFF,CADF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,KAAKD,KAAL,CAAWE,KAAX,CAAiBY,GAAjB,CAAqB,CAACC,GAAD,EAAMC,MAAN,KAAgB;AACnC,0BACE;AAAI,QAAA,GAAG,EAAEA,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,GAAG,CAACE,IAAT,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,GAAG,CAACG,GAAT,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,GAAG,CAACI,GAAT,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,GAAG,CAACK,WAAT,CAJF,CADF;AAQD,KATD,CAHJ,CAdF,CAHN,CADF;AAsCD;;AA9E+B;;AAiFlC,eAAexB,GAAf","sourcesContent":["import React from 'react';\nimport Axios from 'axios'; \n\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\" // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      city: \"load .....\", // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n     \n      clima: [] // Neste arrai vamos adicionar as reposta da API sobre clima, dia, etc\n    }\n  }\n\n  componentDidMount(){\n\n      Axios.get(API) // O axios é uma outra forma de buscar links externos (no caso a nossa API) e ele também é uma Promesie\n        .then (response=> {\n          const json = response.data // Estamos acessando a resposta do servidor (O Axios entende por si só o tipo de resposta não porecisa falar que é JSON)\n          \n           // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n\n            this.setState ({ // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n              city: json.results.city_name, \n              /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n              alocado no json.results.city_name\n              \n              Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n              é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n\n              clima: json.results.forecast\n\n            })\n  \n        \n        })\n\n  }\n/* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \ndos métodos (.then) */\n  render(){\n\n    return ( \n      <div className= \"container\">  \n            <h1> {this.state.city} </h1>\n\n            <table className=\"striped centered\"> \n              <thead>\n\n                <tr>\n\n                  <th>DATA</th>\n                  <th>MIN.</th>\n                  <th>MAX.</th>\n                  <th>DESC.</th>\n\n                </tr>\n\n              </thead>\n\n              <tbody>\n\n                {\n                  this.state.clima.map((day, indice) =>{\n                    return (\n                      <tr key={indice}>\n                        <td>{day.date}</td>\n                        <td>{day.min}</td>\n                        <td>{day.max}</td>\n                        <td>{day.description}</td>\n                      </tr>\n                    );\n                  })\n                }\n\n              </tbody>\n              \n            </table>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}