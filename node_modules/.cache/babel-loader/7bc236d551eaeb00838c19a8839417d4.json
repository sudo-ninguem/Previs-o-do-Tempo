{"ast":null,"code":"var _jsxFileName = \"/home/dio/\\xC1rea de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js\";\nimport React from 'react';\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\"; // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"\" // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n\n    };\n  }\n\n  componentDidMount() {\n    fetch(API) // A função (fetc) serve justamente para buscar um link externo (no caso nossa API)\n    .then(response => response.json()) // Estamos pegando a resposta que vier do link e convertento para (json)\n    .then(json => {\n      // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n      this.setState({\n        // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n        city: json.results.city_name\n        /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n        alocado no json.results.city_name\n        \n        Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n        é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n\n      });\n    });\n  }\n  /* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \n  dos métodos (.then) */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \" \", this.state.city, \" \"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dio/Área de trabalho/Udemy/REACT/APPS/previsao_do_tempo/src/App.js"],"names":["React","API","App","Component","constructor","props","state","city","componentDidMount","fetch","then","response","json","setState","results","city_name","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,gEAAZ,C,CAA6E;;AAE7E,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAOA,KAAP;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK,CACF;;AADE,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,KAAK,CAACR,GAAD,CAAL,CAAW;AAAX,KAEGS,IAFH,CAESC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFrB,EAEsC;AAFtC,KAIGF,IAJH,CAISE,IAAI,IAAG;AAAE;AAEd,WAAKC,QAAL,CAAe;AAAE;AACfN,QAAAA,IAAI,EAAEK,IAAI,CAACE,OAAL,CAAaC;AACnB;;;;;;AAFa,OAAf;AASD,KAfH;AAgBH;AACH;;;;AAEEC,EAAAA,MAAM,GAAE;AAEN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKV,KAAL,CAAWC,IAAjB,MADN,CADF;AAKD;;AArC+B;;AAwClC,eAAeL,GAAf","sourcesContent":["import React from 'react';\n\nconst API = \"https://api.hgbrasil.com/weather?woeid=455821&format=json-cors\" // Estamos colocando o endereço da API que vamos usar\n\nclass App extends React.Component {\n\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      city: \"\" // Estamos criando aqui um elemento vazio, mas que vai ser preenchido com o elemento que pegarmos da API\n    }\n  }\n\n  componentDidMount(){\n      fetch(API) // A função (fetc) serve justamente para buscar um link externo (no caso nossa API)\n\n        .then (response => response.json()) // Estamos pegando a resposta que vier do link e convertento para (json)\n\n        .then (json =>{ // Agora que convertemos a resposta em JSON podemos de fato pegar os elementos dentro dele \n\n          this.setState ({ // Uma vez convertendo a resposta em JSON podemos de fato alterar os dados da nossa aplicação\n            city: json.results.city_name \n            /*Aqui nos pegamos o nosso elemento (city) e estamos alterando o estado dela passando como novo estado o elemento\n            alocado no json.results.city_name\n            \n            Se navegarmos no link da nossa API vamos ver que o nome da cidade esta justamente dentro de results que por sua vez\n            é um react, ou seja, basicamente estamos alterando o status da nossa aplicação por meio de uma navegação PONTO*/\n          })\n\n        })\n  }\n/* Outra coisa que podemos observear é que a função (fetch) é uma Promesie e por sua vez vai retornando dados por meio \ndos métodos (.then) */\n  render(){\n\n    return ( \n      <div>  \n            <h1> {this.state.city} </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}